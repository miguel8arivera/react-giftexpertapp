{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftApiApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","cats","onSubmit","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GiftApiApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAsCeA,EAnCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAMnCC,EAAe,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAGxCN,EAAc,MAQlB,OACE,uBAAMO,SAAUN,EAAhB,UACE,8CAEA,uBAAOO,KAAK,OAAOC,MAAOV,EAAYW,SAvBhB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,UAuBrB,wBAAQF,SAAUN,EAAlB,qB,+BC7BOW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXhB,kBAedM,GAfc,4CAAH,sDCYLO,EAVK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEhC,OACE,sBAAKc,UAAU,yDAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCqBKO,EAxBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAN,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDb2BK,CAAa1B,GAAjCa,EADkB,EACxBN,KAAca,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,yDAAd,SACGhB,IAEFoB,GACC,mBAAGJ,UAAU,wDAAb,wBAKA,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEgBnBgB,EAhCI,WAAO,IAAD,EACa1C,mBAAS,CAAC,SADvB,mBAChB2C,EADgB,KACJ5C,EADI,KAgBvB,OACE,qCACE,4CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWnB,KAAI,SAACT,GAAD,OAEd,aADA,CACC,EAAD,CAASA,SAAUA,GAAeA,Y,MCxB5C6B,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.897c3355.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleChangeInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n\r\n      //   setCategories([...categories, inputValue]);\r\n      setInputValue(\"\");\r\n    }\r\n    // console.log(\"submit realizado\");\r\n\r\n    /*     //forma a usar ya se pasaria a categories como props\r\n    setCategories((cats) => [...cats, inputValue]); */\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>Add category</h2>\r\n\r\n      <input type=\"text\" value={inputValue} onChange={handleChangeInput} />\r\n      <button onSubmit={handleSubmit}>Add</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGift = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=ILAgGmkwWzGxQfeuE24sWv47nWADJ9Ve`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n  /* console.log(gifs);\r\n    setImages(gifs); */\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  // console.log({ id, title, url });\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"card animate__animated animate__bounce animate__fadeIn\">\r\n        {category}\r\n      </h3>\r\n      {loading && (\r\n        <p className=\"card animate__animated animate__bounce animate__flash\">\r\n          Loading...\r\n        </p>\r\n      )}\r\n      {\r\n        <div className=\"card-grid\">\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { getGift } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGift(category).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GiftApiApp = () => {\r\n  const [categories, setCategories] = useState([\"Goku\"]);\r\n  /* const categories = [\"Goku\", \"One Punch\", \"Caballeros del Zodiaco\", \"Marvel\"]; */\r\n\r\n  //   const rendering = categories.map((category) => (\r\n  //     <li key={category}>{category}</li>\r\n  //   ));\r\n  /* const rendering = categories.map((category) => {\r\n    return <li key={category}>{category}</li>;\r\n  }); */\r\n\r\n  /* const handleAdd = () => {\r\n    // setCategories([...categories, \"Hunter X\"]);\r\n    setCategories((cats) => [\"Shaman King\", ...categories]);\r\n    {rendering}\r\n  }; */\r\n  return (\r\n    <>\r\n      <h2>GiftApiApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      {/* <button onClick={handleAdd}>Add</button> */}\r\n      <ol>\r\n        {categories.map((category) => (\r\n          //   <li key={category}>{category}</li>\r\n          <GifGrid category={category} key={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GiftApiApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GiftApiApp from \"./GiftApiApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <GiftApiApp />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}